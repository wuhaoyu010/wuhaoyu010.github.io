<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[NexT主题个性化定制]]></title>
      <url>%2F2017%2F02%2F27%2Fhexouse%2F</url>
      <content type="text"><![CDATA[前言本文出现的hexo目录是你克隆的GitHub工程目录next即主题目录 切记切记 NexT添加背景 添加网页背景图片 找一个喜欢的背景图片 命名为background.jpg 放到“hexo目录 -&gt; themes -&gt; next -&gt; source -&gt; images” 文件夹里然后到“hexo -&gt; themes -&gt; next -&gt; source -&gt; css -&gt; _custom”， 找到路径下的 custom.styl 文件，在文件的最上方加上一代码 123body &#123; background:url(/images/background.jpg); &#125; 就可以了 提示：最好找些简单的；元素少点的图片，测试过炫酷的图片，会出现分页的现象。不想让图片浮动，在上面的代码基础上添加 background-repeat: no-repeat; 添加导航页背景图片 本设置以NexT主题风格为Muse为例挑选一张横向的图片 放到上文提到的目录下进入“nest -&gt; source -&gt; css -&gt; _common -&gt; components -&gt; header”下打开 header.styl 文件 编入以下代码在最上面12345678.header &#123; background-image: url(/images/header.jpg); background-size: 100% 100%; &#125; .header-inner &#123; position: relative; &#125; 就可以实现了 如下图的效果 添加标签背景色 完成第二步之后，若你的图片颜色过深会导致标签看不见了，怎么办呢？ 进入next-&gt;source-&gt;css-&gt;_common-&gt;components-&gt;header目录，打开site-nav.styl文件在sit-nav与mobile之间添加background-color，颜色任选123.site-nav &#123; background-color: rgba(252, 252, 252, 0.9); +mobile() &#123; 添加 High一下 功能本功能恕在下只能摘抄了 感谢lancelot_lewis 代码地址 网上有的方法是直接插入在next -&gt; layout -&gt; _partials下的header.swig文件中；但还可以把此代码提取出来当作外部js文件执行第一步next主题配置的 _config.yml 文件中（即next文件夹下的） 添加1234menu: high: javascript:void(0)menu_icons: high: play 添加到menu下的标签，因为配置设置死了，必须有href的值，就算写成 high: 后面什么都不写你点击 high 标签都会回到主页（此主题设定 空是返回主页）。第一个 high 的javascript:void(0)是指a标签的跳转链接，其实这里的功能就是为了让它不跳转的，另外还有一个功能，可以把空链接的a标签悬浮变成手型的鼠标。第二个 high对应的play是展示的图标，NexT主题使用的是fontawesome图标，这里的play就是其对应的图标，想自己diy一下就去fontawesome上找个自己喜欢的。 还要加一句配置文件中找到12# Canvas-nestcanvas_nest: false 字段 在其后面添加（引号去掉）12# High一下high: true 第二步 NexT主题加载外部 js 文件在“ hexo -&gt; layout -&gt; _scripts -&gt; vendors.swg”中，模仿fancybox的方式，添加了这段代码：123&#123;% if theme.high %&#125; &#123;% set js_vendors.high = 'high/high.min.js' %&#125;&#123;% endif %&#125; 这样的处理就可以在主题的配置文件中使用配置选择是否打开high一下功能，现在就还需要把high.js放到对应的文件夹中，打开代码地址 复制代码到high.min.js （命名成.min以后会用到，别急嘛）我这边的路径是“next -&gt; source -&gt; lib -&gt; high -&gt; high.min.js”。 完全按照上述步骤，你也会实现这个炫酷又嘈杂的功能哒！ gulp实现代码压缩感谢 但丁笔记 我只是略做了点补充 安装gulp我推荐使用最新版的gulp 4.0，为了更方便的使用gulp的顺序执行任务功能。此处知识在这里了解到的。123456# 安装全局的 gulp 4.0$ npm install "gulpjs/gulp-cli#4.0" -g $ npm install "gulpjs/gulp#4.0" -g# 安装本地的 gulp 4.0$ npm install "gulpjs/gulp#4.0" --save-dev 我安装第一个的时候失败了，但不影响使用的。 安装gulp插件在这里需要以下： gulp-minify-css 压缩css gulp-htmlmin 压缩html gulp-htmlclean html清理 gulp-uglify 压缩js gulp-imagemin 压缩图片 gulp-clean 清理文件或目录 gulp-shell 安装命令 npm install [plugins-name] --save plugins-name在上面呦 配置gulp安装完毕后在工程目录下创建一个js文件，命名为gulpfile.js 打开 输入一下代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//加载插件var gulp = require('gulp'), minifyCss = require('gulp-clean-css'), htmlmin = require('gulp-htmlmin'), uglify = require('gulp-uglify'), htmlclean = require('gulp-htmlclean'), //获取 gulp-imagemin 模块 imagemin = require('gulp-imagemin');//压缩cssgulp.task('minify-css',function() &#123; return gulp.src(['public/**/*.css','!public/**/*.min.css']) .pipe(minifyCss()) .pipe(gulp.dest('./public'));&#125;);//压缩jsgulp.task('minify-js',function() &#123; return gulp.src(['public/**/*.js','!public/**/*.min.js']) .pipe(uglify()) .pipe(gulp.dest('./public')); &#125;);//压缩htmlgulp.task('minify-html',function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true &#125;)) .pipe(gulp.dest('./public')); &#125;);//压缩图片gulp.task('images',function() &#123; //找到图片 return gulp.src('./public/images/*.*') //压缩图片 .pipe(imagemin(&#123; progressive: false &#125;)) .pipe(gulp.dest('./public/images')); &#125;);//执行命令时执行的任务gulp.task('default', gulp.parallel('minify-css','minify-js','minify-html','images')); 解释一下： 我将 high一下 的js文件命名为high.min.js是原因 当时我也是直接命名成high.js，运行gulp命令总是报错，不得以将其命名成压缩版的名称。gulpfile.js文件中的“!”后再加路径是为了不检测这些文件，因为已经是压缩文件了。 安装gulp4.0的原因 4.0版本中集成了顺序压缩的功能；其中的gulp.series(…)是顺序执行的意思，gulp.parallel(…)是同步进行的意思，他俩也可联合使用。 现在可以测试一下了。 执行命令当你完成依次文档编辑后，运行以下命令：1234hexo cleanhexo ggulphexo d 即可上你的博客查看源文件，没有大片空白了。 编程路长，我还需要走走 欢迎在下方留言，我会尽量帮助您们的！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo+GitHub搭建个人博客历程]]></title>
      <url>%2F2017%2F02%2F23%2Fhexoblog%2F</url>
      <content type="text"><![CDATA[准备工作 建立博客以来参考的所有教程链接 手把手教你用Hexo+Github 搭建属于自己的博客 建立博客需要的环境 git下载; note.js下载; GitHub主页 安装完成的成功标志 windows系统下 按win+R 输入cmd 然后键入 出现如图所示的版本号就算成功啦 npm -v node -v git –version Hexo安装与配置 Hexo安装上述环境搭建完成后，在文件夹内右键会出现Git Bash Here 创建任意一个空文件夹 命名随意(我是在D盘建立的hexo文件夹) 在该文件夹内右键点击Git Bash Here 在其中输入：npm install hexo-cli -g (WARN 不用担心，不影响使用) npm install hexo –save (等待…) hexo -v (出现版本号就安装成功了) Hexo配置－－初始化Hexo在刚才的界面中输入以下命令： hexo init再输入： npm install －－Hexo本地预览接着输入： hexo g 再输入： hexo s 现在可以在浏览器中是输入 localhost:4000 即可看到 －－Hexo配置到此结束了 Hexo与GitHub连接照着我的步骤Hexo的配置会重新做一次，麻烦了一点 GitHub账号设置 [github官网]（https://github.com） 注册github账号 新建工程 工程设置 点击Branch 在文本框中输入hexo（我已经有了）然后点击create hexo 点击setting 选择Branches 下拉选择hexo Git ssh（git个人信息） 此步骤是针对第一次创建账号的用户 git-ssh配置和使用 （完成前五步就可以了） 下载工程到本地 在本地创建一个空文件夹(此处假设是git)，在里面右键打开Git Bash Here 输入 git clone git@github.com:yourname/yourname.github.io.git （例如用户名是local 就输入git clone git@github.com:local/local.github.io.git） －－注意：先将.git文件夹复制到别处 如上一级git文件夹中；在我实战中 下一步的 “hexo init”命令会把此文件夹删除 重复Hexo安装 然后进入local.github.io文件夹 右键打开Git Bash Here 依次输入： npm install hexo hexo init （此时将.git文件夹复制回来） npm install npm install hexo-deployer-git（此时当前分支应该还是显示为hexo，这是上一步注意的原因） 修改配置 用SublimeText3等等程序打开local.github.io文件夹中的_config.yml 找到deploy参数 如下配置 冒号之后填写local/local.github.io.git 部署到GitHub 继续在git上输入如下命令： git add . git commit -m “…” git push origin hexo(注意此时git上显示的应该是hexo分支) hexo g -d 此时在浏览器输入 local.github.io 应该就会出现Hello World界面了 日常改动过程本地修改完毕后依次执行 git add . git commit -m &quot;...&quot; git push origin hexo 指令将改动推送到GitHub（此时当前分支应为hexo !important） 最后执行hexo g -d发布网站到master分支上 常见问题与心得 本地资料丢失或者换电脑了的恢复方法使用git clone git@github.com:local/local.github.io.git拷贝仓库（默认分支为hexo） 移步到local.github.io文件夹内 使用git bash 输入npm install hexonpm installnpm install hexo-deployer-git(不用hexo init了) 主题替换方法以NexT为例 进入local.github.io目录 右键打开Git Bash 输入：git clone https://github.com/iissnan/hexo-theme-next themes/next打开本目录中的_config.xml文件找到theme字段 并将其值改为 next如：theme: next －－注意：冒号后面有空格，不可省略的 验证主题提示：切换和验证主题前最好用 hexo clean 命令清除一下Hexo的缓存很有用的继续上面的Git Bash 输入：hexo s出现INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.即可在浏览器访问 http://localhost:4000 进行验证了 更多关于NexT主题的个性化设置请访问NexT学习使用，在此就不一一列举了。]]></content>
    </entry>

    
  
  
</search>
